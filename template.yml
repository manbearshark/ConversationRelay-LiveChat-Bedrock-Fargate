AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Fargate with VPC, ALB, ECR, Bedrock, PrivateLink, and Twilio Conversation Relay

Parameters:

  ECRRepoURL:
    Description: The URL of the ECR repository
    Type: String
    Default: 703671914627.dkr.ecr.us-east-1.amazonaws.com

  ECRImageName:
    Description: The name of the ECR image for the service deployment  
    Type: String
    Default: twilio-conversation-relay-bedrock-services

  ImageTag:
    Description: The ECR image tag - corresponds to the version of the image     
    Type: String
    Default: latest

  pCustomerDomainCertificateArn:
    Description: The ARN of the certificate for the custom domain
    Type: String
    Default: arn:aws:acm:us-east-1:703671914627:certificate/deeca1f7-91ef-4d1e-bc73-836ad0683984

  pBedrockApplicationInferenceProfile:
    Description: Inference profile used for Bedrock calls
    Type: String
    #Default: us.anthropic.claude-3-5-sonnet-20240620-v1:0
    #Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
    Default: us.amazon.nova-micro-v1:0

  pImageName:
    Description: Name of the ECR image for the service deployment
    Type: String
    Default: twilio-conversation-relay-bedrock-services

  pPublicWSSEndpoint:
    Description: Name of the ECR image for the service deployment
    Type: String
    Default: wss://bedrock.aws.twiliosoapbox.com/

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:  

  # DynamoDB Table used to track conversations
  PrimaryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true
      TableName: !Sub "${AWS::StackName}-ConversationRelayAppDatabase"
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "pk1"
          AttributeType: "S"
        -
          AttributeName: "sk1"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "index-1-full"
          KeySchema:
            -
              AttributeName: "pk1"
              KeyType: "HASH"
            -
              AttributeName: "sk1"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  # VPC and Security Group
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc.yml
    Parameters:      
      pCustomerDomainCertificateArn: !Ref pCustomerDomainCertificateArn

  # Cluster and Service for Fargate
  # This will create a cluster and service for the Twilio Conversation Relay service
  # The service will be deployed in the VPC created above

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders: 
        - FARGATE
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "twilio-conversation-relay-bedrock-service"
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 5
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!GetAtt "VPC.Outputs.PublicSubnet1", !GetAtt VPC.Outputs.PublicSubnet2]
          SecurityGroups: [!GetAtt VPC.Outputs.SG]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: 1
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: "twilio-conversation-relay-bedrock-service"
          ContainerPort: 3000
          TargetGroupArn: !GetAtt VPC.Outputs.LB

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: twilio-conversation-relay-service 
      Cpu: 1024
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      RuntimePlatform:
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: twilio-conversation-relay-bedrock-service
          Cpu: 1024
          Memory: 8192
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageName}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: INFERENCE_PROFILE_ARN
              Value: !Ref pBedrockApplicationInferenceProfile
            - Name: STACK_USE_CASE
              Value: restaurantOrderingUseCase
            - Name: WS_URL
              #Value: !GetAtt VPC.Outputs.PublicLBWSURL
              Value: !Ref pPublicWSSEndpoint
            - Name: TABLE_NAME
              Value: !Ref PrimaryDynamoDBTable
            # - Name: NODE_ENV
            #   Value: !Ref Environment
            # - Name: DB_HOST
            #   Value: !Sub "{{resolve:ssm:${DBHostParameter}:1}}"
            # - Name: DB_USER
            #   Value: !Sub "{{resolve:ssm:${DBUserParameter}:1}}"
            # - Name: DB_PASSWORD
            #   Value: !Sub "{{resolve:ssm:${DBPasswordParameter}:1}}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: containerlog
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /fargatelogs

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
        # - Effect: Allow
        #   Action:
        #     - ssm:GetParameters
        #   Resource: 
        #     - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBHostParameter}"
        #     - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUserParameter}"
        #     - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordParameter}"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
 
  #creating an IAM role using IAM managed policy AmazonBedrockFullAccess with the service bedrock
  AmazonBedrockFullAccess:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "bedrock.amazonaws.com"
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonBedrockFullAccess"
      RoleName: "AmazonBedrockFullAccess"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonBedrockFullAccess"
  
  ECSTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "ECSTaskPolicy"
      Roles:
        - !Ref ECSTaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:*"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-ConversationRelayAppDatabase"

  # Bedrock CloudWatch metrics for performance and usage monitoring using automated dashboards:
  # https://aws.amazon.com/blogs/machine-learning/improve-visibility-into-amazon-bedrock-usage-and-performance-with-amazon-cloudwatch/

  rBedrockLoggingKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for Bedrock logging
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-ConversationRelayBedrockLogGroup

          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: '*'
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  rBedrockLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-ConversationRelayBedrockLogGroup" 
      RetentionInDays: 30
    UpdateReplacePolicy: Delete 
    DeletionPolicy: Delete

  rBedrockServiceRoleForLogging:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:*
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: '2012-10-17'

  rBedrockServiceRoleForLoggingDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt rBedrockLogGroup.Arn
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Resource: !GetAtt rBedrockLoggingKey.Arn
        Version: '2012-10-17'
      PolicyName: BedrockLoggingRoleDefaultPolicy
      Roles:
        - !Ref rBedrockServiceRoleForLogging

Outputs:
  DynamoDBTable:
    Description: DynamoDB Table Name
    Value: !Ref PrimaryDynamoDBTable
  ClusterName:
    Description: Twilio ConversationRelay Service 
    Value: !Ref Cluster
  ServiceName:
    Description: Amazon ECS Service Name
    Value: !GetAtt Service.Name
  FQDN:
    Description: URL for your application
    Value: !GetAtt VPC.Outputs.PublicLBFQDN
  WSURL:
    Description: WebSocket URL for your application
    Value: !GetAtt VPC.Outputs.PublicLBWSURL