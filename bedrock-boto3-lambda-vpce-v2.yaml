AWSTemplateFormatVersion: "2010-09-09"

Description: Setup VPC infrastructure for testing amazon bedrock api using lambda over vpc endpoint.

Parameters:

  ProjectName:
    Type: String
    Default: "Bedrock-GenAI-Project"
  VpcCIDR:
    Type: String
    Default: "10.3.0.0/16"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnet1CIDR:
    Type: String
    Default: "10.3.1.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnet2CIDR:
    Type: String
    Default: "10.3.2.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Bedrock Infra Setup Parameters"
        Parameters: 
          - ProjectName
          - VpcCIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Sub  "${AWS::Region}a"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Sub  "${AWS::Region}b"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for bedrock workload in private subnets
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-security-group

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup

  #########################
  #
  # ROUTE TABLES
  #
  #########################
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  BedrockTestLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:*"
                Resource: "*"
          PolicyName: BedrockPolicy

  BedrockTestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt 'BedrockTestLambdaFunctionRole.Arn'
      Runtime: python3.11
      Timeout: 60
      MemorySize: 512
      Layers:
        - !Ref BedrockBoto3Layer
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def handler(event, context):
            print("Boto3 version:", boto3.__version__)
            region = os.environ['AWS_REGION']

            # bedrock = boto3.client(service_name='bedrock', region_name=region, endpoint_url=f'https://bedrock.{region}.amazonaws.com')
            # models=bedrock.list_foundation_models()
            # modelIds = [model['modelId'] for model in models['modelSummaries']]
            # print("Models: ", modelIds)

            bedrock_runtime = boto3.client(service_name='bedrock-runtime', region_name=region, endpoint_url=f'https://bedrock-runtime.{region}.amazonaws.com')
            
            
            prompt_data = """Human: Why is sky blue?.

            Assistant:
            """
            body = json.dumps({"prompt": prompt_data, "max_tokens_to_sample": 500})
            response = bedrock_runtime.invoke_model(body=body, modelId='anthropic.claude-instant-v1', accept='application/json', contentType='application/json')
            response_body = json.loads(response.get('body').read())
            print(response_body.get("completion"))

  #########################
  #
  # VPC ENDPOINTS
  #
  #########################
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TLS for VPC Endpoint
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-endpoint-security-group

  EndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      GroupId: !Ref VPCEndpointSecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup

  VPCEndpointBedrockRuntime:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - 'bedrock:InvokeModel'
            Resource: 
              - 'arn:aws:bedrock:*::foundation-model/anthropic.claude-instant-v1'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.bedrock-runtime'
      VpcId: !Ref VPC

  BedrockBoto3Layer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content:
        S3Bucket: aws-ml-blog
        S3Key: bedrock-1-28-57.zip
      CompatibleRuntimes:
        - python3.11

  

Outputs:

  BedrockBoto3Layer:
    Description: Lambda layer for Boto3 Bedrock SDK extensions
    Value: !Ref BedrockBoto3Layer




